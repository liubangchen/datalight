#+startup: showall

* 开发环境配置
- 本工程依赖绝大多数依赖均采用源码依赖的方式(统一规范)，为避免每次cmake ../ 都会拉取依赖，可采用如下方式清理cmake的cache
  1. mkdir build & cd build & cmake ../ 这个时候第一执行的时候会自动clone依赖的类库
  2. mkdir build & cd build & cmake -DFETCHCONTENT_FULLY_DISCONNECTED=ON -DFETCHCONTENT_UPDATES_DISCONNECTED=ON ../  会使用已经clone好的源码库，节省下载时间
** 开发环境配置
在cmake ../ 后在编译目录下会生成compile_commands.json,将compile_commands.json移动到工程根目录，开发IDE可根据个人喜好进行配置，比如ccls+emacs, vscode和compile_commands.json配置请
参考[[https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference][这里]]
*  硬件环境检查
代码使用了向量化框架，需要检查cpu支持那种类型的向量化指令

#+BEGIN_SRC shell
  #MACOS
  sysctl -a | grep cpu.feat
  #Linux
  lscpu
#+END_SRC

* 依赖管理
所有依赖均通过源码进行依赖，不通过静态库或者动态库进行依赖

- 编译

  #+BEGIN_SRC shell
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm/bin/clang++ -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm/bin/clang  ../
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/gcc/bin/c++-11 -DCMAKE_C_COMPILER=/opt/homebrew/opt/gcc/bin/gcc-11  ..
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  ../
  #+END_SRC
- centos

  #+BEGIN_SRC shell
    yum install centos-release-scl-rh
    yum install devtoolset-11-toolchain
  #+END_SRC

- 重新生成cmake文件

  #+BEGIN_SRC shell
    cd build
    find . -name CMakeCache.txt -exec rm {} \;
    cmake ../
  #+END_SRC
- 执行

  #+BEGIN_SRC shell
    bin/trino-server -etc_dir ./etc -logtostdout true
  #+END_SRC
